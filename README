CSC254_A3
=========

project 3 for CSC254
Dan Scarafoni and Charles Lehner


compilation and run instructions
--------------------------------
-compile the file , type "$ make" in the command prompt, this will make the LLParser program and the primes.c program from the primes.calc program
-to compile the primes.c program, type "$ make prmes" into the command prompt
-to execute the primes file compiled from c, type "$ ./primes"
-to execute the LLParser file, type "$ ./LLParser"
	-the program run is (by default) set to the "primes" program, you can change which program to use by altering the "program_to_use" variable (highlighted at the bottom of the page)
	-use the -c command to specify the compilation of a -c file, you will be prompted to type this file into the command line
-to remove all object code, type "$ make clean"


extras
------
Our our program, for extra credit, generates c code based on calculator code. This is done using tail recursion.

bugs
----
no known bugs exist in the system; however, the interpreter function cannot receive input from files. It can only either use standard input or one of the sample program strings built in.
The intepreter for c does not use tail recursion, this is because of time limitations and an inability to work around the bind function (>>=)

AST conversion
--------------
the AST generating algorithm works by progressively matching Nodes in the parse tree. It uses recursive descent and works by matching keywords and phrases (i.e. "read") and passing
the result to other functions for interptretation. The program has separate functionsn for interpreting the P, S, SL, C, E, and tail of E productions. All of the above correspond
one to one with productions in the grammar, however the E and ETail functions require further explanation. The E function matches E, F, and T productions, and the ETail matches
FT and TT productions. A separation between these two was necessary, as the FT and TT would not necessarily return a ful expression, depending on the result of the F and T production.
Each production returned a specific type corresponding to it's particular level in the grammar. P returned the entire AST, which was stored as a list of statements. 
SL also returned a statement list, as P was a wrapper for SL. S returned a statement, which was defined as one of the possible instructions for the interpreter (assignment, read,
write, etc...). C returned a condition, and E and ETail returned expressions (literals, variables, or mathematical expressions). The resulting AST, a list of statements, was fed into the interpreter

Interpretation
---------------
This code recursively walks the AST and evaluates each statement as it does so. The evaluation process also keeps track of all variables and identifiers, as well as all input andoutput.
The data structures used were the standard ones given by the project. The operator strings were matched with currified operators for evaluation.
The c code generator is a process separate from the interpreter, though it does utilize the AST as input. The program keeps track of all the values of assigned variables in order
to assign variable type declaration. Possible future work could include creating code to handle multiple variables types (instead of just int).
The c code generator correctly indents the code given by recursively passing down the indentation level.


Wrapper and Driver
-----------------
There are two main driver functions for the program, one for handling c code and one for handling normal calculator code (depending on the flag used). The c driver then awaits user input for the program they wish to be compiled. The calc driver will automatically run the "primes" program given on the project website. It also awaits user input, but it takes the 
input numbers for the program as opposed to the program itslef.



