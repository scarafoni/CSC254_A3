CSC254_A3
=========

project 3 for CSC254
Dan Scarafoni and Charles Lehner

file manifest
-------------
-LLParser.ml
	-source file for all relevant functions
primes.calc
	-sample calculator function from the website
LLParser
	-binary executable for the project

compilation and run instructions
--------------------------------
-compile the file , type "$ make" in the command prompt, this will compile the LLParser program
-to compile a c program from a .calc program, type "$ make some_program.c" the calc file used will be the one with the same name as the .c program
	-c files generated with this method can be compiled with gcc
-to execute the LLParser file, type "$ ./LLParser"
	-use the -c command followed by the desired calc file to parse the calc file into stdio, use file redirection (">") to pipe the result into a file
	-to run a specific file with LLParser, type in the .calc file as the first argument when running LLParser
	-if no arguments are given, the LLParser program will run and interprets the primes function (which is hard coded into the LLParser.ml file)
-to remove all object code, type "$ make clean"


extras
------
Our our program, for extra credit, generates c code based on calculator code. This is done using tail recursion.

bugs
----
no known bugs exist in the system; however, the interpreter function cannot receive input from files. It can only either use standard input or one of the sample program strings built in.
The intepreter for c does not use tail recursion, this is because of time limitations and an inability to work around the bind function (>>=)

AST conversion
--------------
the AST generating algorithm works by progressively matching Nodes in the parse tree. It uses recursive descent and works by matching keywords and phrases (i.e. "read") and passing
the result to other functions for interptretation. The program has separate functionsn for interpreting the P, S, SL, C, E, and tail of E productions. All of the above correspond
one to one with productions in the grammar, however the E and ETail functions require further explanation. The E function matches E, F, and T productions, and the ETail matches
FT and TT productions. A separation between these two was necessary, as the FT and TT would not necessarily return a ful expression, depending on the result of the F and T production.
Each production returned a specific type corresponding to it's particular level in the grammar. P returned the entire AST, which was stored as a list of statements. 
SL also returned a statement list, as P was a wrapper for SL. S returned a statement, which was defined as one of the possible instructions for the interpreter (assignment, read,
write, etc...). C returned a condition, and E and ETail returned expressions (literals, variables, or mathematical expressions). The resulting AST, a list of statements, was fed into the interpreter

Interpretation
---------------
This code recursively walks the AST and evaluates each statement as it does so. The evaluation process also keeps track of all variables and identifiers, as well as all input andoutput.
The data structures used were the standard ones given by the project. The operator strings were matched with currified operators for evaluation.
The c code generator is a process separate from the interpreter, though it does utilize the AST as input. The program keeps track of all the values of assigned variables in order
to assign variable type declaration. Possible future work could include creating code to handle multiple variables types (instead of just int).
The c code generator correctly indents the code given by recursively passing down the indentation level.


Wrapper and Driver
-----------------
There are two main driver functions for the program, one for handling c code and one for handling normal calculator code (depending on the flag used). The c driver will generate
a c file from a specified calc file. The calc driver will automatically run the "primes" program given on the project website, unless othewise specified. The code used to read in files was based on code used with permission from stackoverflow.
